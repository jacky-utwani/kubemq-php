<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kubemq.proto

namespace Kubemq;

use UnexpectedValueException;

/**
 * Protobuf type <code>kubemq.StreamRequestType</code>
 */
class StreamRequestType
{
    /**
     * Generated from protobuf enum <code>StreamRequestTypeUnknown = 0;</code>
     */
    const StreamRequestTypeUnknown = 0;
    /**
     * Generated from protobuf enum <code>ReceiveMessage = 1;</code>
     */
    const ReceiveMessage = 1;
    /**
     * Generated from protobuf enum <code>AckMessage = 2;</code>
     */
    const AckMessage = 2;
    /**
     * Generated from protobuf enum <code>RejectMessage = 3;</code>
     */
    const RejectMessage = 3;
    /**
     * Generated from protobuf enum <code>ModifyVisibility = 4;</code>
     */
    const ModifyVisibility = 4;
    /**
     * Generated from protobuf enum <code>ResendMessage = 5;</code>
     */
    const ResendMessage = 5;
    /**
     * Generated from protobuf enum <code>SendModifiedMessage = 6;</code>
     */
    const SendModifiedMessage = 6;

    private static $valueToName = [
        self::StreamRequestTypeUnknown => 'StreamRequestTypeUnknown',
        self::ReceiveMessage => 'ReceiveMessage',
        self::AckMessage => 'AckMessage',
        self::RejectMessage => 'RejectMessage',
        self::ModifyVisibility => 'ModifyVisibility',
        self::ResendMessage => 'ResendMessage',
        self::SendModifiedMessage => 'SendModifiedMessage',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

