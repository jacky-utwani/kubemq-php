<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kubemq.proto

namespace Kubemq\Subscribe;

use UnexpectedValueException;

/**
 * Protobuf type <code>kubemq.Subscribe.SubscribeType</code>
 */
class SubscribeType
{
    /**
     * Generated from protobuf enum <code>SubscribeTypeUndefined = 0;</code>
     */
    const SubscribeTypeUndefined = 0;
    /**
     * Generated from protobuf enum <code>Events = 1;</code>
     */
    const Events = 1;
    /**
     * Generated from protobuf enum <code>EventsStore = 2;</code>
     */
    const EventsStore = 2;
    /**
     * Generated from protobuf enum <code>Commands = 3;</code>
     */
    const Commands = 3;
    /**
     * Generated from protobuf enum <code>Queries = 4;</code>
     */
    const Queries = 4;

    private static $valueToName = [
        self::SubscribeTypeUndefined => 'SubscribeTypeUndefined',
        self::Events => 'Events',
        self::EventsStore => 'EventsStore',
        self::Commands => 'Commands',
        self::Queries => 'Queries',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SubscribeType::class, \Kubemq\Subscribe_SubscribeType::class);

