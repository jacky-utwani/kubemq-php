<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kubemq.proto

namespace Kubemq\Subscribe;

use UnexpectedValueException;

/**
 * Protobuf type <code>kubemq.Subscribe.EventsStoreType</code>
 */
class EventsStoreType
{
    /**
     * Generated from protobuf enum <code>EventsStoreTypeUndefined = 0;</code>
     */
    const EventsStoreTypeUndefined = 0;
    /**
     * Generated from protobuf enum <code>StartNewOnly = 1;</code>
     */
    const StartNewOnly = 1;
    /**
     * Generated from protobuf enum <code>StartFromFirst = 2;</code>
     */
    const StartFromFirst = 2;
    /**
     * Generated from protobuf enum <code>StartFromLast = 3;</code>
     */
    const StartFromLast = 3;
    /**
     * Generated from protobuf enum <code>StartAtSequence = 4;</code>
     */
    const StartAtSequence = 4;
    /**
     * Generated from protobuf enum <code>StartAtTime = 5;</code>
     */
    const StartAtTime = 5;
    /**
     * Generated from protobuf enum <code>StartAtTimeDelta = 6;</code>
     */
    const StartAtTimeDelta = 6;

    private static $valueToName = [
        self::EventsStoreTypeUndefined => 'EventsStoreTypeUndefined',
        self::StartNewOnly => 'StartNewOnly',
        self::StartFromFirst => 'StartFromFirst',
        self::StartFromLast => 'StartFromLast',
        self::StartAtSequence => 'StartAtSequence',
        self::StartAtTime => 'StartAtTime',
        self::StartAtTimeDelta => 'StartAtTimeDelta',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(EventsStoreType::class, \Kubemq\Subscribe_EventsStoreType::class);

